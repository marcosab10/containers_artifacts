# kubectl create secret generic db-user-pass --from-literal=SQL_SERVER=sqlserverlcg5206.database.windows.net --from-literal=SQL_DBNAME=mydrivingDB --from-literal=SQL_USER=sqladminlCg5206 --from-literal=SQL_PASSWORD=Vivo123@ -n api

# Create Deployments

apiVersion: apps/v1
kind: Deployment
metadata:
  name: poi-deployment
  namespace: api
spec:
  selector:
    matchLabels:
      app: poi-deployment
  replicas: 1
  template:
    metadata:
      labels:
        app: poi-deployment
    spec:
      containers:
      - name: poi
        image: registrylcg5206.azurecr.io/poi:1.0
        ports:
        - containerPort: 80
        env:
        - name: SQL_SERVER
          value: "host.docker.internal"
        - name: SQL_DBNAME
          value: "mydrivingDB"
        - name: SQL_USER
          value: "SA"
        - name: SQL_PASSWORD
          value: "Vivo123@"
        - name: ASPNETCORE_ENVIRONMENT
          value: "Local"
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-deployment
  namespace: api
spec:
  selector:
    matchLabels:
      app: user-deployment
  replicas: 1
  template:
    metadata:
      labels:
        app: user-deployment
    spec:
      containers:
      - name: user
        image: registrylcg5206.azurecr.io/user:1.0
        ports:
        - containerPort: 80
        env:
        - name: SQL_SERVER
          value: "host.docker.internal"
        - name: SQL_DBNAME
          value: "mydrivingDB"
        - name: SQL_USER
          value: "SA"
        - name: SQL_PASSWORD
          value: "Vivo123@"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-java-deployment
  namespace: api
spec:
  selector:
    matchLabels:
      app: user-java-deployment
  replicas: 1
  template:
    metadata:
      labels:
        app: user-java-deployment
    spec:
      containers:
      - name: user
        image: registrylcg5206.azurecr.io/user-java:1.0
        ports:
        - containerPort: 80
        env:
        - name: SQL_SERVER
          value: "host.docker.internal"
        - name: SQL_DBNAME
          value: "mydrivingDB"
        - name: SQL_USER
          value: "SA"
        - name: SQL_PASSWORD
          value: "Vivo123@"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: trips-deployment
  namespace: api
spec:
  selector:
    matchLabels:
      app: trips-deployment
  replicas: 1
  template:
    metadata:
      labels:
        app: trips-deployment
    spec:
      containers:
      - name: user
        image: registrylcg5206.azurecr.io/trips:1.0
        ports:
        - containerPort: 80
        env:
        - name: SQL_SERVER
          value: "host.docker.internal"
        - name: SQL_DBNAME
          value: "mydrivingDB"
        - name: SQL_USER
          value: "SA"
        - name: SQL_PASSWORD
          value: "Vivo123@"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tripviewer-deployment
  namespace: web
spec:
  selector:
    matchLabels:
      app: tripviewer-deployment
  replicas: 1
  template:
    metadata:
      labels:
        app: tripviewer-deployment
    spec:
      containers:
      - name: user
        image: registrylcg5206.azurecr.io/tripviewer:1.1
        ports:
        - containerPort: 80
        env:
        - name: TRIPS_API_ENDPOINT
          value: "http://trips-service.api.svc.cluster.local/api/trips"
        - name: USERPROFILE_API_ENDPOINT
          value: "http://user-service.api.svc.cluster.local/api/user"


---

apiVersion: v1
kind: Service
metadata:
  name: trips-service
  namespace: api
spec:
  selector:
    app: trips-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: api
spec:
  selector:
    app: user-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: tripviewer-service
  namespace: web
spec:
  selector:
    app: tripviewer-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: poi-service
  namespace: api
spec:
  selector:
    app: poi-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: user-java-service
  namespace: api
spec:
  selector:
    app: user-java-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
